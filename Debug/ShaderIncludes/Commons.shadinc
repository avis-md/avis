INSTART
layout(location=0) in vec3 pos;
layout(location=1) in vec2 texCoord;
layout(location=2) in vec3 normal;
INEND

V2FSTART
vec2 v2f_uv;
vec4 v2f_normal;
float v2f_depth;
V2FEND

COMMONSTART
//vec4 samplehdri (sampler2D sampler, Vec3 dir) {
//	
//}
vec4 hdr2float (vec4 i) {
	float p = pow(2, i.a);
	vec4 c;
	c.rgb = vec3(i.r, i.g, i.b)*p;
	c.a = 1;
	return c;
}
float encodeDepth (float f) {
	return 1.0/(f+1);
}
float decodeDepth (float f) {
	return (1.0/f)+1;
}
uniform mat4 _M;
uniform mat4 _MVP;
uniform int _isForward = 1;
COMMONEND

FRAGSTART
layout (location=0) out vec4 outColor; //rgba
layout (location=1) out vec4 outNormal; //xyz []
layout (location=2) out vec4 outSpec; //spec gloss
layout (location=3) out vec4 outEmi; //z

void Output(vec4 col, vec3 norm, vec3 spec, float gloss, vec3 emi) {
	outColor = col;
	outColor.a = max(outColor.a, _isForward);
	outNormal.rgb = normalize(norm);
	outNormal.a = 0;
	outSpec.rgb = spec;
	outSpec.a = gloss;
    outEmi.rgb = emi;
    outEmi.a = 1;
	//outDepth = z;
}
FRAGEND