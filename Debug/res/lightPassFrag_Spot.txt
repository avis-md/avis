#version 330

uniform mat4 _IP;
uniform vec2 screenSize;
uniform sampler2D inColor;
uniform sampler2D inNormal;
uniform sampler2D inSpec;
uniform sampler2D inDepth;

uniform vec3 lightPos;
uniform vec3 lightDir;
uniform vec3 lightColor;
uniform float lightStrength;
uniform float lightCosAngle;
uniform float lightMinDist;
uniform float lightMaxDist;

uniform sampler2D lightDepth;
uniform float lightDepthStrength;
uniform mat4 _LD;

out vec4 fragCol;

void main () {
	vec2 uv = gl_FragCoord.xy / screenSize; //screen position xy 0~1
	vec4 dCol = texture(inColor, uv);
	vec4 nCol = texture(inNormal, uv);
	vec4 sCol = texture(inSpec, uv);
	float z = texture(inDepth, uv).x;
	float nClip = 0.01;
	float fClip = 500.0;
	
	float zLinear = (2 * nClip) / (fClip + nClip - z * (fClip - nClip)); //z normalized 0~1
	vec4 dc = vec4(uv.x*2-1, uv.y*2-1, z*2-1, 1);
	vec4 wPos = _IP*dc;
	wPos *= ceil(1-z) / wPos.w; //world position
	vec4 wPos2 = _IP*vec4(dc.x, dc.y, -1, 1);
	wPos2 *= ceil(1-z) / wPos2.w; //world position (camera)
	
	vec3 fwd = normalize((wPos - wPos2).xyz);
	vec3 refl = normalize(reflect(fwd, nCol.xyz)); //view refl norm vector
	
	vec3 ds = wPos.xyz - lightPos;
	vec3 dir = normalize(ds);
	float dist = length(ds);
	
	float isInMin = max(min(ceil((dist - lightMinDist*lightMinDist)), 1), 0);
	float isInMax = max(min(ceil((lightMaxDist*lightMaxDist - dist)), 1), 0);
	
	float insideCone = ceil(max(dot(dir, lightDir) - lightCosAngle, 0));
	
	float natten = max(dot(-dir, nCol.xyz), 0);
	
	//float depthTmp = texture(lightDepth, uv).x;
	//float depthTmp2 = (2 * lightMinDist) / (lightMaxDist + lightMinDist - depthTmp * (lightMaxDist - lightMinDist));
	
	vec4 cpos = _LD*wPos;
	cpos /= cpos.w;
	
	float d1 = texture(lightDepth, vec2(cpos.x*0.5 + 0.5, (cpos.y*0.5 + 0.5))).x;
	float d2 = cpos.z;
	float notShadow = ceil(d1-d2);
	notShadow = mix(1, notShadow, lightDepthStrength);
	
	float drefl = max(1-(1-dot(-refl, dir))*(1.0/(1-sCol.a*sCol.a)), 0);
	fragCol = vec4(vec3(1, 1, 1)*lightColor*lightStrength*dCol.rgb*insideCone*isInMin*isInMax*natten*notShadow, 0);
	
	//fragCol = vec4(1,1,1,0)*texture(lightDepth, vec2(cpos.x*0.5 + 0.5, (cpos.y*0.5 + 0.5)));
	//fragCol = vec4(1,1,1,0)*ceil(d1-d2);
	//fragCol = vec4(1,1,1,0)*texture(lightDepth, uv).x;
	//fragCol = vec4(0, 0, 0, 1);
}