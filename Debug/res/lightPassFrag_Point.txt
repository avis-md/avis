#version 330

uniform mat4 _IP;
uniform vec2 screenSize;
uniform sampler2D inColor;
uniform sampler2D inNormal;
uniform sampler2D inSpec;
uniform sampler2D inDepth;
//uniform float zNear;
//uniform float zFar;

uniform vec3 lightPos;
uniform vec3 lightColor;
uniform float lightStrength;
uniform float lightRadius2;
uniform float lightDistance;
//uniform float haloIntensity;

out vec4 fragCol;

//d2 = (distance2 - radius2) / (maxDistance2 - radius2)
//atten = intensity*(1 - d2)

void main () {
	vec2 uv = gl_FragCoord.xy / screenSize; //screen position xy 0~1
	vec4 dCol = texture(inColor, uv);
	vec4 nCol = texture(inNormal, uv);
	vec4 sCol = texture(inSpec, uv);
	float z = texture(inDepth, uv).x;
	float nClip = 0.01;
	float fClip = 500.0;
	
	float zLinear = (2 * nClip) / (fClip + nClip - z * (fClip - nClip)); //z normalized 0~1
	vec4 dc = vec4(uv.x*2-1, uv.y*2-1, z*2-1, 1);
	vec4 wPos = _IP*dc;
	wPos *= ceil(1-z) / wPos.w; //world position
	vec4 wPos2 = _IP*vec4(dc.x, dc.y, -1, 1);
	wPos2 *= ceil(1-z) / wPos2.w; //world position (camera)
	
	vec3 fwd = normalize((wPos - wPos2).xyz);
	vec3 refl = normalize(reflect(fwd, nCol.xyz)); //view refl norm vector
	
	vec3 ds = wPos.xyz - lightPos;
	vec3 dir = normalize(ds);
	float dist = length(ds);
	float mdist = lightDistance - dist;
	float atten = lightStrength*(((mdist*mdist - lightRadius2)/(lightDistance*lightDistance - lightRadius2)));
	atten = min(atten, lightStrength);
	float natten = max(dot(-dir, nCol.xyz), 0);
	
	float drefl = max(1-(1-dot(-refl, dir))*(1.0/(1-sCol.a*sCol.a)), 0);
	
	fragCol = vec4(vec3(1, 1, 1)*lightColor*dCol.rgb*atten*natten, 0);
	//fragCol = vec4(0, 0, 0, 0);
	//fragCol += vec4(drefl*lightColor*sCol.rgb, 0);
}