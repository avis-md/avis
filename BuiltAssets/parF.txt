#version 330 core

uniform mat4 _P;

flat in int v2f_id;
in vec3 v2f_pos;
in float v2f_scl;
in float v2f_rad;

uniform vec2 screenSize;
uniform samplerBuffer id2col;
uniform sampler2D colList;

layout (location=0) out vec4 outColor;
layout (location=1) out uvec4 outId;
layout (location=2) out vec4 outNormal;

float length2 (vec3 v) {
	return v.x*v.x + v.y*v.y + v.z*v.z;
}

void SetColor(int id) {
    int cd = int(texelFetch(id2col, id-1).r * 255);
    outColor = texture(colList, vec2((mod(cd, 16) + 0.5) / 16.0, ((cd / 16) + 0.5) / 16.0));
}

void main()
{
    float R = v2f_rad * v2f_scl;
    vec4 ndc = vec4(
        (gl_FragCoord.x / screenSize.x - 0.5) * 2.0,
        (gl_FragCoord.y / screenSize.y - 0.5) * 2.0,
        (gl_FragCoord.z - 0.5) * 2.0,
        1.0);

    vec4 wPos = inverse(_P) * ndc;
    wPos /= wPos.w;

    ndc.z = -1;
    vec4 wPos2 = inverse(_P) * ndc;
    wPos2 /= wPos2.w;

    vec3 fwd = (wPos - wPos2).xyz;
    vec3 cfwd = (v2f_pos - wPos2.xyz);
    float C2 = length2(cfwd);
    fwd = normalize(fwd);
    cfwd = normalize(cfwd);
    float cs = dot(fwd, cfwd);

    float isq = C2*cs*cs - C2 + R*R;

    if (cs < 0 || isq < 0) {
        discard;
    }
    else {
        float vl = (sqrt(C2)*cs - sqrt(isq));
        if (vl < 0) {
            discard;
        }
        vec3 s = wPos2.xyz + fwd * vl;

        vec4 ndc2 = _P * vec4(s, 1);
        ndc2 /= ndc2.w;
        gl_FragDepth = ndc2.z * 0.5 + 0.5;
        SetColor(v2f_id);
        outId = uvec4(v2f_id, 0, 0, 0);
        outNormal.xyz = normalize(s - v2f_pos);
    }
}