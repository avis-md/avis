#version 330 core

uniform mat4 _MV, _P;
uniform vec3 camPos;
uniform vec3 camFwd;

uniform vec2 screenSize;

uniform samplerBuffer posTex;
uniform usamplerBuffer connTex;

flat out uint v2f_id1;
flat out uint v2f_id2;
out vec3 v2f_pos;
out vec3 v2f_wpos1;
out vec3 v2f_wpos2;
out float v2f_scl;

void main(){
    uint id1 = texelFetch(connTex, gl_VertexID * 2).r;
    uint id2 = texelFetch(connTex, gl_VertexID * 2 + 1).r;
    v2f_id1 = id1 + 1U;//gl_VertexID * 2 + 1;
    v2f_id2 = id2 + 1U;//gl_VertexID * 2 + 2;
	vec3 pos1 = texelFetch(posTex, gl_VertexID * 2).rgb;
	vec3 pos2 = texelFetch(posTex, gl_VertexID * 2 + 1).rgb;
	vec3 pos = (pos1 + pos2) * 0.5;
	
	vec4 wpos = _MV*vec4(pos1, 1);
	v2f_wpos1 = (wpos / wpos.w).xyz;
	wpos = _MV*vec4(pos2, 1);
	v2f_wpos2 = (wpos / wpos.w).xyz;
	
	vec4 unitVec = _MV*vec4(1, 0, 0, 0);
	v2f_scl = length(unitVec);
	
    wpos = _MV*vec4(pos, 1);
    wpos /= wpos.w;
    v2f_pos = wpos.xyz;
    gl_Position = _P*wpos;
    
    vec3 wdir = wpos.xyz - camPos;
    float z = length(wdir);
    float ca = dot(normalize(wpos.xyz - camPos), camFwd);
	float z2 = z * ca;
	gl_PointSize = (length(v2f_wpos2 - v2f_wpos1)/2 + 0.016 * v2f_scl) * screenSize.x / z2;
	if (z < 0.1) gl_PointSize = 0;
}