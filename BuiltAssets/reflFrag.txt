#version 330

uniform mat4 _IP;
uniform vec2 screenSize;
uniform sampler2D inColor;
uniform sampler2D inNormal;
uniform sampler2D inSpec;
uniform sampler2D inEmit;
uniform sampler2D inDepth;

uniform sampler2D inSky;
uniform float skyStrength;
uniform float skyStrDecay;

uniform float rimOffset;
uniform float rimStrength;

out vec4 fragCol;

vec4 skyColAt(vec3 dir) {
	vec2 refla = normalize(-vec2(dir.x, dir.z));
	float cx = acos(refla.x)/(3.14159 * 2);
	cx = mix(1-cx, cx, sign(refla.y) * 0.5 + 0.5);
	float sy = asin(dir.y)/(3.14159);
	
	return texture(inSky, vec2(cx + 0.125, sy + 0.5));
}

void main () {
	vec2 uv = gl_FragCoord.xy / screenSize; //screen position xy 0~1
	vec4 dCol = texture(inColor, uv);
	vec4 nCol = texture(inNormal, uv);
	vec4 sCol = texture(inSpec, uv);
	vec4 eCol = texture(inEmit, uv);
	float z = texture(inDepth, uv).x;
	float nClip = 0.01;
	float fClip = 500.0;
	
	float zLinear = (2 * nClip) / (fClip + nClip - z * (fClip - nClip)); //z normalized 0~1
	
    if (z >= 1) {
        fragCol = vec4(0, 0, 0, 0);
        return;
    }
	if (length(nCol.xyz) == 0) {
		fragCol = eCol * eCol.a;
		return;
	}
	 
	
    vec3 skycol = skyColAt(nCol.xyz).rgb;
    float skystr = skycol.r*0.3 + skycol.g*0.6 + skycol.b*0.1;
    fragCol.rgb = mix(skycol * dCol.rgb, vec3(1, 1, 1), pow(skystr, 3)) * skyStrength * (1 - skyStrDecay * zLinear);
    
    
    //rim light
	vec4 dc = vec4(uv.x*2-1, uv.y*2-1, z*2-1, 1);
	vec4 wPos = _IP*dc;
	wPos /= wPos.w; //world position
    vec4 wPos2 = _IP*vec4(uv.x*2-1, uv.y*2-1, -1, 1);
    wPos2 /= wPos2.w;
    vec3 fwd = normalize(wPos.xyz - wPos2.xyz);
    
    float nf = dot(fwd, nCol.xyz);
    fragCol.rgb += skycol * max(nf + rimOffset, 0) * rimStrength;
    fragCol.a = 1;
}