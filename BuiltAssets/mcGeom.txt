#version 330 core
layout(points) in;
layout(triangle_strip, max_vertices = 16) out;

uniform mat4 _MV, _P;
uniform sampler3D tex;
uniform sampler3D ctex;
uniform float thres;
uniform ivec3 sz;
uniform isamplerBuffer triTable;

in vec3 v2g_uvw[1];
out vec3 v2f_spos;

out vec3 v2f_nrm;
out vec3 v2f_col;

float imix(float a, float b, float t) {
	return (t-a)/(b-a);
}


void main() {
	int edges[24] = int[24](
		0,1,1,2,2,3,0,3,
		4,5,5,6,6,7,4,7,
		0,4,1,5,2,6,3,7
	);
	vec3 dp = vec3(1.0/sz.x, 1.0/sz.y, 1.0/sz.z) * 0.5;
	float f = texture(tex, v2g_uvw[0]).x;
	vec3 _p = v2g_uvw[0];
	vec4 pts[8] = vec4[8](
		vec4(_p.x-dp.x, _p.y-dp.y, _p.z-dp.z, 1),
		vec4(_p.x+dp.x, _p.y-dp.y, _p.z-dp.z, 1),
		vec4(_p.x+dp.x, _p.y+dp.y, _p.z-dp.z, 1),
		vec4(_p.x-dp.x, _p.y+dp.y, _p.z-dp.z, 1),
		vec4(_p.x-dp.x, _p.y-dp.y, _p.z+dp.z, 1),
		vec4(_p.x+dp.x, _p.y-dp.y, _p.z+dp.z, 1),
		vec4(_p.x+dp.x, _p.y+dp.y, _p.z+dp.z, 1),
		vec4(_p.x-dp.x, _p.y+dp.y, _p.z+dp.z, 1)
	);

	float vals[8];
	
	for (int i = 0; i < 8; i++) {
		vals[i] = texture(tex, pts[i].xyz).x;
	}

	int cid = 0;
	for (int i = 0; i < 8; i++) {
		if (vals[i] > thres) cid += 1 << i;
	}
	cid *= 16;

	for (int i = 0; i < 15; i++) {
		int eg = texelFetch(triTable, cid + i).r;
		if (eg == -1) break;
		int e1 = edges[eg*2];
		int e2 = edges[eg*2 + 1];
		float lc = imix(vals[e1], vals[e2], thres);
		vec4 lpos = mix(pts[e1], pts[e2], lc);
		
		float grx = texture(tex, lpos.xyz + vec3(dp.x, 0, 0)).x
			- texture(tex, lpos.xyz - vec3(dp.x, 0, 0)).x;
		float gry = texture(tex, lpos.xyz + vec3(0, dp.y, 0)).x
			- texture(tex, lpos.xyz - vec3(0, dp.y, 0)).x;
		float grz = texture(tex, lpos.xyz + vec3(0, 0, dp.z)).x
			- texture(tex, lpos.xyz - vec3(0, 0, dp.z)).x;
		
		v2f_nrm = (_MV*vec4(normalize(vec3(grx, gry, grz)), 0)).xyz;
		v2f_col = mix(vec3(0,0,1), vec3(1,0,0), texture(ctex, lpos.xyz).x);
		
		lpos.xyz = lpos.xyz * 0.4 - vec3(1,1,1) * 0.2;
		gl_Position = _P*_MV*lpos;
		v2f_spos = gl_Position.xyz / gl_Position.w;
		EmitVertex();
	}

	EndPrimitive();
}
