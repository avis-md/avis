#version 330
in vec3 v2f_uvw;
in vec3 v2f_wpos;
in vec3 v2f_cpos;
in vec3 v2f_cdir;

uniform mat4 _IMV;
uniform vec3 size;
uniform vec3 camPos;
uniform sampler3D tex;

layout (location=0) out vec4 outId; //rgba
layout (location=1) out vec4 outNormal; //xyz []
layout (location=2) out vec4 outSpec; //spec gloss
layout (location=3) out vec4 outEmi; //emi occlu

void main()
{
	if (dot(v2f_wpos - v2f_cpos, v2f_cdir) > 0)
		discard;
	
	vec3 tca = v2f_cpos - v2f_wpos;
	vec3 tc = normalize(tca);
	vec3 fwd = normalize(v2f_wpos - camPos);
	
	//if (dot(tc, fwd) < 0)
	//	discard;
	
	vec3 dtt = normalize(fwd - tc);
	vec3 tt = normalize(cross(v2f_cdir, cross(dtt, v2f_cdir)));
	
	float a1 = acos(dot(tt, fwd));
	float a2 = acos(dot(fwd, tc));
	float dst = length(tca) * sin(a2) / sin(a1);
	vec3 wpn = v2f_cpos + dst * tt;
	vec4 uvw = _IMV * vec4(wpn, 1);
	uvw /= uvw.w;
	uvw.xyz = (uvw.xyz / size) * 0.5 + vec3(0.5, 0.5, 0.5);
	//if (uvw.x<0 || uvw.x>1 || uvw.y<0 || uvw.y>1 || uvw.z<0 || uvw.z>1)
	//	discard;
	
	outId = vec4(0,0,0,0);
	outNormal = vec4(0,0,0,0);
	outSpec = vec4(0,0,0,0);
	//outEmi.rgb = texture(tex, uvw).rgb;
	//outEmi.rgb = fwd;
	outEmi.rgb = vec3(dst, 0, 0);
	outEmi.a = 1;
}